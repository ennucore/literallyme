main:
  params: [args]
  steps:
    - init:
        assign:
            - userId: ${args.userId}
            - archiveUrl: ${args.archiveUrl}
            - targetId: ${args.targetId}
            - docName: ${args.docName}
    - try_catch_training:
        try:
            steps:
                - try_record_training:
                    call: http.post
                    args:
                      url: ${sys.get_env("PAYMENTS_FUNCTION_URL")}
                      body:
                        userId: ${userId}
                        operation: tryRecordTraining
                      auth:
                        type: OIDC
                    result: try_record_training_response
                - create_callback:
                    call: events.create_callback_endpoint
                    args:
                        http_callback_method: "POST"
                    result: callback_details
                - start_training:
                    call: http.post
                    args:
                        url: ${sys.get_env("TRAINING_START_FUNCTION_URL")}
                        body:
                            archiveUrl: ${archiveUrl}
                            userId: ${userId}
                            targetId: ${targetId}
                            callbackUrl: ${callback_details.url}
                        auth:
                            type: OIDC
                    result: start_training_response
                - await_callback:
                    call: events.await_callback
                    args:
                        callback: ${callback_details}
                        timeout: 10800
                    result: callback_request
                - handle_training_status:
                    switch:
                        - condition: ${callback_request.http_request.body.status == "failed"}
                          next: raise_training_error
                    next: assign_completed
                - raise_training_error:
                    raise: "Training failed"
                - generate_thumbnail:
                    call: http.post
                    args:
                      url: ${sys.get_env("IMAGE_GEN_SERVICE_URL")}
                      body:
                        userId: ${userId}
                        targetId: ${targetId}
                        weightsUrl: ${callback_request.http_request.body.weightsUrl}
                        imagePrompt: "A cinematic portrait photo of a TOK white background"
                    result: image_gen_response
                - assign_completed:
                    assign:
                        - status: ${callback_request.http_request.body.status}
                        - weightsUrl: ${callback_request.http_request.body.weightsUrl}
                        - thumbnailUrl: ${image_gen_response.http_request.body.images}
                - record_training_completed:
                    call: http.post
                    args:
                        url: ${sys.get_env("BOOKKEEPER_SERVICE_URL") + "/record_training_completed"}
                        body:
                            document_path: ${docName}
                            weightsUrl: ${weightsUrl}
                            thumbnailUrl: ${thumbnailUrl}
                            status: ${status}
                        auth:
                            type: OIDC
        except:
            as: e
            steps:
                - refund_training:
                    call: http.post
                    args:
                      url: ${sys.get_env("PAYMENTS_FUNCTION_URL")}
                      body:
                        userId: ${userId}
                        operation: refundTraining
                      auth:
                        type: OIDC
                    result: refund_training_response
                - assign_failed:
                    assign:
                        - status: "failed"
                        - weightsUrl: ""
                        - thumbnailUrl: []
                - record_training_failed:
                    call: http.post
                    args:
                        url: ${sys.get_env("BOOKKEEPER_SERVICE_URL") + "/record_training_completed"}
                        body:
                            document_path: ${docName}
                            weightsUrl: ${weightsUrl}
                            thumbnailUrl: ${thumbnailUrl}
                            status: ${status}
                        auth:
                            type: OIDC
    - return_result:
        return:
            weightsUrl: ${weightsUrl}
            status: ${status}