main:
  params: [args]
  steps:
    - init:
        assign:
            - userId: ${args.userId}
            - targetId: ${args.targetId}
            - imagePrompt: ${args.imagePrompt}
            - weightsUrl: ${args.weightsUrl}
            - generationId: ${args.generationId}
            - docName: ${args.docName}
    - try_catch_image_generation:
        try:
            steps:
                - try_record_image_generation:
                    call: http.post
                    args:
                      url: ${sys.get_env("PAYMENTS_FUNCTION_URL")}
                      body:
                        userId: ${userId}
                        operation: tryRecordImageGeneration
                      auth:
                        type: OIDC
                    result: try_record_image_generation_response
                - gen_images:
                    call: http.post
                    args:
                        url: ${sys.get_env("IMAGE_GEN_SERVICE_URL") + "/generate_images"}
                        body:
                            weightsUrl: ${weightsUrl}
                            userId: ${userId}
                            targetId: ${targetId}
                            imagePrompt: ${imagePrompt}
                            generationId: ${generationId}
                        auth:
                            type: OIDC
                    result: image_gen_response
                - handle_image_gen_status:
                    switch:
                        - condition: ${image_gen_response.body.status == "failed"}
                          next: raise_image_gen_error
                    next: assign_completed
                - raise_image_gen_error:
                    raise: "Image generation failed"
                - assign_completed:
                    assign:
                        - images: ${image_gen_response.body.images}
                        - status: ${image_gen_response.body.status}
                - record_images_completed:
                    call: http.post
                    args:
                        url: ${sys.get_env("BOOKKEEPER_SERVICE_URL") + "/record_images_completed"}
                        body:
                            document_path: ${docName}
                            images: ${images}
                            status: ${status}
                        auth:
                            type: OIDC
        except:
            as: e
            steps:
                # todo: handle failed refund
                - refund_generation:
                    call: http.post
                    args:
                      url: ${sys.get_env("PAYMENTS_FUNCTION_URL")}
                      body:
                        userId: ${userId}
                        operation: refundImageGeneration
                      auth:
                        type: OIDC
                    result: refund_image_generation_response
                - assign_failed:
                    assign:
                        - images: []
                        - status: "failed"
                - record_images_failed:
                    call: http.post
                    args:
                        url: ${sys.get_env("BOOKKEEPER_SERVICE_URL") + "/record_images_completed"}
                        body:
                            document_path: ${args.docName}
                            images: ${images}
                            status: ${status}
                        auth:
                            type: OIDC
    - return_result:
        return:
            images: ${images}
            status: ${status}
